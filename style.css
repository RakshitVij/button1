/* This code is a CSS custom properties (variables) declaration within the :root pseudo-class. */
/* :root Pseudo-class: This selector matches the root element of the document, which is usually the <html> element. It is used to define global CSS variables that can be accessed anywhere in the CSS file. */
:root {
  --bg: hsl(221, 37%, 10%);
  --button-text: hsl(200, 60%, 12%);
  --button-1-surface: hsl(197, 88%, 58%);
  --button-2-surface: hsl(42, 96%, 56%);
}

/* html { ... }: This selector targets the <html> element, which is the root of the HTML document. The styles defined inside this block will apply to the entire document. */
/* background: var(--bg);: This property sets the background color of the document to the value stored in the --bg CSS variable. According to your previous definition, --bg is hsl(221, 37%, 10%), which is a dark blue color. */
html {
  color-scheme: dark;
  font-family: system-ui;
  font-size: 2rem;
  background: var(--bg);
}

body {
  min-height: 80vh;
  display: flex;
  gap: 1rem;
  justify-content: center;
  align-items: center;
}

/* This CSS code defines a custom-styled button with a "glassy" or "frosted glass" effect. It uses CSS variables for flexibility and animations for smooth transitions.  */
/* These are custom properties defined for the .glassy-button class to store values for easy reuse and adjustment:
--_padding: Padding inside the button (1rem 1.5rem).
--_transition-speed: Speed of transitions (250ms).
--_hover-opacity: Opacity of the button on hover (0.4).
--_pressed-opacity: Opacity of the button when pressed (0.15).
--_hover-bluriness: Blur effect on hover (5px).
--_pressed-bluriness: Blur effect when pressed (11px).
--_frostiness: Frostiness level (0.5).
--_hover-offset: Vertical offset on hover (0.5rem).
--_pressed-offset: Vertical offset when pressed (0.25rem).
--_motion-factor: Factor for motion effect (0.4).

Main Button Styles
These styles define the overall appearance and behavior of the button:
outline: 0;: Removes the default outline.
cursor: pointer;: Changes the cursor to a pointer when hovering over the button.
font: inherit;: Inherits the font from the parent element.
color: var(--button-text);: Sets the text color using the --button-text variable.
font-weight: 500;: Sets the font weight.
padding: 0;: Removes default padding.
border: 0;: Removes the default border.
border-radius: 1rem;: Rounds the button corners.
background-color: transparent;: Sets the background to transparent.
margin-top: 30vh;: Adds top margin.
position: relative;: Sets the position relative for the span inside it.

Span Styles
These styles apply to a span inside the button:
display: block;: Makes the span a block-level element.
overflow: hidden;: Hides overflow content.
padding: var(--_padding);: Adds padding using the custom variable.
border-radius: inherit;: Inherits border radius from the button.
background-color: hsl(0 0% 100% / 0);: Sets the initial background color to fully transparent white.
backdrop-filter: blur(0px);: Applies no blur initially.
transition: Adds smooth transitions for transformations, background color, and backdrop filter.

Span ::before Pseudo-element
This pseudo-element creates a background layer with a noise texture:
content: "";: Adds empty content.
position: absolute;: Positions it absolutely within the span.
inset: 0;: Stretches it to fill the span.
z-index: -1;: Places it behind the span content.
background-image: Adds a noise texture background image.
opacity: 0;: Makes it initially transparent.
transition: opacity var(--_transition-speed);: Smoothly transitions opacity.

Button ::after Pseudo-element
This pseudo-element creates a secondary background effect:
content: "";: Adds empty content.
position: absolute;: Positions it absolutely within the button.
z-index: -1;: Places it behind the button content.
inset: 0;: Stretches it to fill the button.
border-radius: inherit;: Inherits the button's border radius.
background-color: var(--_surface);: Sets the background color using a variable.
transition: Adds smooth transitions for transformations.
animation: exit forwards var(--_transition-speed);: Applies an exit animation.

Hover and Focus Styles
These styles apply when the button is hovered or focused:
span: Adjusts the span's outline, background color, backdrop filter, and translation.
&::before: Adjusts the opacity of the noise texture.
&::after: Scales and translates the background effect.

Active Styles
These styles apply when the button is active (pressed):
span: Adjusts the span's backdrop filter, background color, and translation.
&::after: Scales and translates the background effect.

Keyframes for Animation
Defines the enter animation:
from: Initial state of no translation.
to: Translates based on motion factors.

Summary
This CSS code creates a button with a "glassy" look and feel, including various interactive effects like hover and press states, and animations for smooth transitions. It uses CSS variables for customization and maintainability.
 */
.glassy-button {
  --_padding: 1rem 1.5rem;
  --_transition-speed: 250ms;
  --_hover-opacity: 0.4;
  --_pressed-opacity: 0.15;
  --_hover-bluriness: 5px;
  --_pressed-bluriness: 11px;
  --_frostiness: 0.5;
  --_hover-offset: 0.5rem;
  --_pressed-offset: 0.25rem;
  --_motion-factor: 0.4;

  outline: 0;
  cursor: pointer;
  font: inherit;
  color: var(--button-text);
  font-weight: 500;
  padding: 0;
  border: 0;
  border-radius: 1rem;
  background-color: transparent;
  margin-top: 30vh;
  position: relative;

  span {
    display: block;
    overflow: hidden;
    padding: var(--_padding);
    border-radius: inherit;
    background-color: hsl(0 0% 100% / 0);
    backdrop-filter: blur(0px);
    transition: translate var(--_transition-speed),
      background-color var(--_transition-speed),
      background-filter var(--_transition-speed);

    &::before {
      content: "";
      position: absolute;
      inset: 0;
      z-index: -1;
      background-image: url("data:image/svg+xml,%3C!-- svg: first layer --%3E%3Csvg viewBox='0 0 250 250' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
      opacity: 0;
      transition: opacity var(--_transition-speed);
    }
  }

  &::after {
    content: "";
    position: absolute;
    z-index: -1;
    inset: 0;
    border-radius: inherit;
    background-color: var(--_surface);
    transition: translate var(--_transition-speed),
      scale var(--_transition-speed);
    animation: exit forwards var(--_transition-speed);
  }

  &:hover,
  &:focus-visible {
    span {
      outline: 1px solid hsl(0 0% 100% / 0.7);
      background-color: hsl(0 0% 100% / var(--_hover-opacity));
      backdrop-filter: blur(var(--_hover-bluriness));
      translate: 0 -0.5rem;

      &::before {
        opacity: var(--_frostiness);
      }
    }

    &::after {
      scale: 0.95;
      translate: 0 0.125rem;
      animation: enter forwards var(--_transition-speed);
    }
  }
  &:active {
    span {
      backdrop-filter: blur(var(--_pressed-bluriness));
      background-color: hsl(0 0% 100% / var(--_pressed-opacity));
      translate: 0 calc(var(--_pressed-offset) * -1);
    }
    &::after {
      scale: 0.875;
      translate: 0 0.25rem;
    }
  }
}

@keyframes enter {
  from {
    transform: translate(0, 0);
  }
  to {
    transform: translate(
      calc(var(--_x-motion) * var(--_motion-factor) * -1),
      calc(var(--_y-motion) * var(--_motion-factor) * -1)
    );
  }
}

@keyframes exit {
  from {
    transform: translate(
      calc(var(--_x-motion) * var(--_motion-factor) * -1),
      calc(var(--_y-motion) * var(--_motion-factor) * -1)
    );
  }
  to {
    transform: translate(0, 0);
  }
}

/* This CSS code is applying different styles to the first and second instances of elements with the class .glassy-button based on their position among their siblings. */
.glassy-button:nth-child(1) {
  --_surface: var(--button-1-surface);
}
.glassy-button:nth-child(2) {
  --_surface: var(--button-2-surface);
}
